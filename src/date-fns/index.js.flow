// @flow
// This file is generated automatically by `scripts/build/typings.js`. Please, don't change it.

export type Interval = {
  start: Date | number,
  end: Date | number,
}

export type Locale = {
  code?: string,
  formatDistance?: (...args: Array<any>) => any,
  formatRelative?: (...args: Array<any>) => any,
  localize?: {
    ordinalNumber: (...args: Array<any>) => any,
    era: (...args: Array<any>) => any,
    quarter: (...args: Array<any>) => any,
    month: (...args: Array<any>) => any,
    day: (...args: Array<any>) => any,
    dayPeriod: (...args: Array<any>) => any,
  },
  formatLong?: {
    date: (...args: Array<any>) => any,
    time: (...args: Array<any>) => any,
    dateTime: (...args: Array<any>) => any,
  },
  match?: {
    ordinalNumber: (...args: Array<any>) => any,
    era: (...args: Array<any>) => any,
    quarter: (...args: Array<any>) => any,
    month: (...args: Array<any>) => any,
    day: (...args: Array<any>) => any,
    dayPeriod: (...args: Array<any>) => any,
  },
  options?: {
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6,
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7,
  },
}

export type Duration = {
  years?: number,
  months?: number,
  weeks?: number,
  days?: number,
  hours?: number,
  minutes?: number,
  seconds?: number,
}

declare module.exports: {

  addDays: (date: Date | number, amount: number) => Date,

  addMonths: (date: Date | number, amount: number) => Date,

  addYears: (date: Date | number, amount: number) => Date,

  differenceInCalendarDays: (
    dateLeft: Date | number,
    dateRight: Date | number
  ) => number,

  differenceInCalendarMonths: (
    dateLeft: Date | number,
    dateRight: Date | number
  ) => number,

  differenceInDays: (
    dateLeft: Date | number,
    dateRight: Date | number
  ) => number,

  eachDayOfInterval: (
    interval: Interval,
    options?: {
      step?: number,
    }
  ) => Date[],

  endOfDay: (date: Date | number) => Date,

  endOfMonth: (date: Date | number) => Date,

  endOfWeek: (
    date: Date | number,
    options?: {
      locale?: Locale,
      weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6,
    }
  ) => Date,

  format: (
    date: Date | number,
    format: string,
    options?: {
      locale?: Locale,
      weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6,
      firstWeekContainsDate?: number,
      useAdditionalWeekYearTokens?: boolean,
      useAdditionalDayOfYearTokens?: boolean,
    }
  ) => string,

  isAfter: (date: Date | number, dateToCompare: Date | number) => boolean,

  isBefore: (date: Date | number, dateToCompare: Date | number) => boolean,

  isEqual: (dateLeft: Date | number, dateRight: Date | number) => boolean,

  isSameDay: (dateLeft: Date | number, dateRight: Date | number) => boolean,

  isSameMonth: (dateLeft: Date | number, dateRight: Date | number) => boolean,

  isValid: (date: any) => boolean,

  isWithinInterval: (date: Date | number, interval: Interval) => boolean,

  max: (datesArray: (Date | number)[]) => Date,

  min: (datesArray: (Date | number)[]) => Date,

  parse: (
    dateString: string,
    formatString: string,
    referenceDate: Date | number,
    options?: {
      locale?: Locale,
      weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6,
      firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7,
      useAdditionalWeekYearTokens?: boolean,
      useAdditionalDayOfYearTokens?: boolean,
    }
  ) => Date,

  setMonth: (date: Date | number, month: number) => Date,

  setYear: (date: Date | number, year: number) => Date,

  startOfDay: (date: Date | number) => Date,

  startOfMonth: (date: Date | number) => Date,

  startOfWeek: (
    date: Date | number,
    options?: {
      locale?: Locale,
      weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6,
    }
  ) => Date,

}
